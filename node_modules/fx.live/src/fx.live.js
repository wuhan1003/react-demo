/**
* @file fx.live.js
* @author GaryGao
*/
;(function (root, factory) {
    if (typeof define === 'function' && define.amd) {
        // AMD 格式
        define('fx.live', factory);
    } else if (typeof exports === 'object') {
        // Node, CommonJS之类的
        module.exports = factory();
    } else {
    	root.Fx = root.Fx || {};

        // Browser globals
        root.Fx.live = factory(root.Fx);
    }
}(this, function (Fx) {
    /**
	* for fis
	* @function
	*/
	function __uri(url) {
		return url;
	}

	/**
	* JSON对象
	* @require
	*/
	JSON = JSON || {
		stringify: function(value, whitelist) {
			function f(n) {
				return n < 10 ? '0' + n : n;
			}
			Date.prototype.toJSON = function() {
				return this.getUTCFullYear() + '-' + f(this.getUTCMonth() + 1) + '-' + f(this.getUTCDate()) + 'T' + f(this.getUTCHours()) + ':' + f(this.getUTCMinutes()) + ':' + f(this.getUTCSeconds()) + 'Z';
			};
			var m = {
				'\b': '\\b',
				'\t': '\\t',
				'\n': '\\n',
				'\f': '\\f',
				'\r': '\\r',
				'"': '\\"',
				'\\': '\\\\'
			};
			return (function serialize(value, whitelist) {
				var a, i, k, l, r = /["\\\x00-\x1f\x7f-\x9f]/g,
					v;
				switch (typeof value) {
					case 'string':
						return r.test(value) ? '"' + value.replace(r, function(a) {
							var c = m[a];
							if (c) {
								return c;
							}
							c = a.charCodeAt();
							return '\\u00' + Math.floor(c / 16).toString(16) + (c % 16).toString(16);
						}) + '"' : '"' + value + '"';
					case 'number':
						return isFinite(value) ? String(value) : 'null';
					case 'boolean':
					case 'null':
						return String(value);
					case 'object':

						if (!value) {
							return 'null';
						}
						if (typeof value.toJSON === 'function') {
							return serialize(value.toJSON());
						}
						a = [];
						if (typeof value.length === 'number' && !(value.propertyIsEnumerable('length'))) {
							l = value.length;
							for (i = 0; i < l; i += 1) {
								a.push(serialize(value[i], whitelist) || 'null');
							}
							return '[' + a.join(',') + ']';
						}
						if (whitelist) {
							l = whitelist.length;
							for (i = 0; i < l; i += 1) {
								k = whitelist[i];
								if (typeof k === 'string') {
									v = serialize(value[k], whitelist);
									if (v) {
										a.push(serialize(k) + ':' + v);
									}
								}
							}
						} else {
							for (k in value) {
								if (typeof k === 'string') {
									v = serialize(value[k], whitelist);
									if (v) {
										a.push(serialize(k) + ':' + v);
									}
								}
							}
						}
						return '{' + a.join(',') + '}';
				}
			})(value, whitelist);
		},
		parse: function(text, filter) {
			return (function(text, filter) {
				if (typeof text != "string" || !text) {
					return null;
				}
				var j;

				function walk(k, v) {
					var i, n;
					if (v && typeof v === 'object') {
						for (i in v) {
							if (Object.prototype.hasOwnProperty.apply(v, [i])) {
								n = walk(i, v[i]);
								if (n !== undefined) {
									v[i] = n;
								} else {
									delete v[i];
								}
							}
						}
					}
					return filter(k, v);
				}
				if (/^[\],:{}\s]*$/.test(text.replace(/\\["\\\/bfnrtu]/g, '@').replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {
					j = eval('(' + text + ')');
					return typeof filter === 'function' ? walk('', j) : j;
				}
				throw new SyntaxError('parseJSON');
			})();
		}
	};
    /**
	* @namespace
	* @name Fx.live
	*/
	Fx.live =  {
		id: '', //播放器id
		SWF: null, //swf对象
		swfData: {
			id: '', //播放器id
			src: '', //swf路径
			width: 0, //播放器宽度
			height: 0 //播放器高度
		},
		liveData: { //直播所需参数
			roomId: '', //房间号
			platform: 'web', //平台(web:繁星web,embed:内嵌直播页)
			liveName: '', //流名字
			liveClient: '', //流服务器地址
			liveStatus: 0 // 直播状态
		},
		/**
		* flash通知JS注册完成
		* @function _flashReady
		* @param {object} flash回传参数
		*/	
		_flashReady: function(data) {
			if (this.readyCallbacks && this.readyCallbacks.length) {
				for (var i = this.readyCallbacks.length - 1; i >= 0; i--) {
					this.readyCallbacks[i] && this.readyCallbacks[i].call(this, data);
				}
			}
		},
		/**
		* flash获取当前域名
		* @function _returnDomain
		* @returns {String} domain of page
		*/
		_returnDomain: function() {
			return document.domain;
		},
		/**
		* flash获取当前游客接口域名
		* @function _returnVDomain
		* @param {object} flash回传参数
		* @returns {object} domain of VService
		*/
		_returnVDomain: function(data) {
			return data;
		},
		/**
		* flash获取直播状态，判断浏览器是否已关闭
		* @function _rootParamStatus
		* @returns {String}
		*/	
		_rootParamStatus: function() {
			return 'live' + this.liveData.roomId;
		},
		/**
		* flash调用JS下载繁星伴奏，用于主播端播放器
		* @function _downloadFxBB
		*/	
		_downloadFxBB: function() {
			var url = 'http://banzou.kugou.com/service.php?act=OffvocalService&mtd=getNewVer&args=[]&jsonCallBack=downloadFxBBCallback'
			var script = document.createElement('script');
			script.src = url;
			document.body.appendChild(script);
			window.downloadFxBBCallback = function(json) {
				if (json.status == 1) {
					var link = document.createElement('a');
					link.setAttribute('href', json.data.url);
					document.body.appendChild(link);
					link.click();
					window.downloadFxBBCallback = null;
					document.body.removeChild(script);
					document.body.removeChild(link);
				} else {
					alert(json.errorcode);
				}
			};
		},
		/**
		* 调用flash方法开播
		* @function startLive
		* @param {String} data - 开播参数
		*/
		startLive: function(data) {
			try {
				this.SWF.startLive(JSON.stringify(data));
			} catch(e) {
				console.log(e);
			}
		},
		/**
		* 调用flash方法停播
		* @function stopLive
		* @param {String} data - 停播参数 
		*/	
		stopLive: function() {
			try {
				this.SWF.stopLive();
			} catch(e) {
				console.log(e);
			}
		},
		/**
		* 调用flash方法重新开播
		* @function playLive
		*/	
		playLive: function() {
			try {
				this.SWF.playLive();
			} catch(e) {
				console.log(e);
			}
		},
		/**
		* 调用flash方法重新开播
		* @function pauseLive
		*/	
		pauseLive: function() {
			try {
				this.SWF.pauseLive();
			} catch(e) {
				console.log(e);
			}
		},
		/**
		* 初始化直播参数
		* @function init
		* @param {obejct} data - 直播参数 
		*/	
		init: function(data, notLoad) {
			//注册直播所需参数
			this.id = data.id || '';
			this.swfData.id = data.id || '';
			this.swfData.src = data.src || '';
			this.swfData.width = data.width || '';
			this.swfData.height = data.height || '';

			this.liveData.roomId = data.roomId || '';
			this.liveData.platform = data.platform || 'web';
			this.liveData.liveName = data.liveName || '';
			this.liveData.liveClient = data.liveClient || '';
			this.liveData.liveStatus = data.liveStatus || 0;

			//加载播放器
			if (!notLoad) {
				this.loadLiveFlashPlayer();
			}
		},
		/**
		* flash注册完成回调
		* @function flashReadyCallback
		* @param {function} callback - 回调方法
		*/	
		flashReadyCallback: function(callback) {
			this.readyCallbacks = this.readyCallbacks || [];
			this.readyCallbacks.push(callback);
		},
		/**
		* 加载swf
		* @function loadLiveFlashPlayer
		*/	
		loadLiveFlashPlayer: function() {
			var object = document.getElementById(this.id);
	        object.outerHTML = '<object id="'+this.swfData.id+'" width="'+this.swfData.width+'" height="'+this.swfData.height+'" data="'+this.swfData.src+'">' 
	                         + '<param name="scale" value="noScale">'
	                         + '<param name="allowScriptAccess" value="always"/>'
	                         + '<param name="allowFullscreen" value="true">'
	                         + '<param name="wmode" value="transparent">'
	                         + '<param name="flashvars" value="roomId='+this.liveData.roomId+'&liveName='+this.liveData.liveName+'&liveStatus='+this.liveData.liveStatus+'&platform='+this.liveData.platform+'&liveClient='+encodeURIComponent(JSON.stringify(this.liveData.liveClient))+'">'
	                         + '<param name="movie" value="'+this.swfData.src+'"/>';
	                         + '</object>';
	        this.SWF = document.getElementById(this.id);
		},
		/**
		* 设置歌曲名设置显示
		* @function showSetSongName
		* @param {int} status - 歌曲设置显示开关
		*/	
		showSetSongName: function(status) {
			try {
				document.getElementById(this.id).showSetSongName(status);
			} catch(e) {
				console.log(e);
			}
		},
		/**
		* 设置歌曲信息
		* @function setSongInfo
		* @param {int} status - 上报开关
		*/	
		setSongInfo: function(data) {
			try {
				document.getElementById(this.id).setSongInfo(JSON.stringify(data));
			} catch(e) {
				console.log(e);
			}
		},
		/**
		* 设置歌曲名
		* @function setSongName
		* @param {string} songName - 歌曲名
		*/	
		setSongName: function(songName) {
			try {
				document.getElementById(this.id).setSongInfo(songName);
			} catch(e) {
				console.log(e);
			}
		},
		/**
		* 注册插件
		* @function openPlugins
		* @param {string} plugins - 插件列表
		*/	
		openPlugins: function(plugins) {
			var jsPluginURL = __uri('/src/plugins/fx.live.plugins.module.js');
			var moduleURLs = [];
			//初始化插件
			this.plugins = this.plugins || {};

			//加载插件js
			for (var i = plugins.length - 1; i >= 0; i--) {
				var plugin = plugins[i];
				var scriptURL = jsPluginURL.replace(/module(?:_\d+)?\.js/, plugin.name + '.js');
				//加载JS插件
				if (scriptURL) {
					var script = document.createElement('script');
					script.src = scriptURL;
					console.log(script.src)
					script.onload = script.onreadystatechange = function(){
						if(!this.readyState || (this.readyState == "complete" || this.readyState == "loaded")){
							script.onreadystatechange = script.onload = null;
							script = null;
							Fx.live.plugins[plugin.name].data = plugin.data;
							Fx.live.plugins[plugin.name].id = Fx.live.id;
							Fx.live.plugins[plugin.name].SWF = Fx.live.SWF;
						}
					};
					document.body.appendChild(script);
				}

				//生成swf模块URL
				var params = '';
				if (plugin.data) {
					for (k in plugin.data) {
						params += '&' + k + '=' + plugin.data[k];
					}
				}
				var moduleURL = plugin.name + '.swf?' + params.slice(1);
				moduleURLs.push(moduleURL);
			};

			//加载模块swf
			try {
				this.SWF.loadModules(JSON.stringify([moduleURLs]));
			} catch(e) {
				console.log(e);
			}
			
		}
	};

	return Fx.live;
}));